#!/usr/bin/env ruby

# frozen_string_literal: true

# Usage: photosort <source> <dest>
# Depends on: exif

require 'fileutils'
require 'optparse'

def exif(file)
	out = `exif #{file} 2> /dev/null`

	return out if $?.success?

	puts "#{file}: Does not contain EXIF data or invalid EXIF format"
end

def extract_exif_date(file)
	out = exif(file)
	date = out&.lines&.find { |l| l.include? 'Date' }

	return date.split('|').at(1).split(':').slice(0, 2) if date

	puts "#{file}: Does not contain a date in EXIF"
end

def make_dedup_dest_path(path, dest_dir)
	n = 1
	filename = File.basename(path)
	fullpath = File.join(dest_dir, filename)

	while File.exist?(fullpath)
		filename = "duplicate-#{n}.#{File.basename(path)}"
		n += 1
	end

	File.join(dest_dir, filename)
end

def main(source_dir, dest_dir, opts)
	Dir.mkdir(dest_dir) unless Dir.exist?(dest_dir)

	Dir.glob("#{source_dir}/**/**").each do |path|
		next if File.directory?(path)

		date = extract_exif_date(path)

		dest_path = if date
			File.join(dest_dir, date[0], date[1])
		else
			File.join(dest_dir, 'unknown')
		end

		dedup_dest_path = make_dedup_dest_path(path, dest_path)

		if opts[:'dry-run']
			puts "mkdir -p #{dest_path}"
			puts "cp #{path} #{dedup_dest_path}"
		else
			FileUtils.mkdir_p(dest_path)
			FileUtils.cp(path, dedup_dest_path)
		end
	end
end

if __FILE__ == $0
	opts = {}
	OptionParser.new  do |p|
		p.banner = 'Usage: photosort <source> <dest>'
		p.on '--dry-run', 'Dry run'
		p.parse! into: opts
	end

	source_dir, dest_dir = ARGV

	main(source_dir, dest_dir, opts)
end
