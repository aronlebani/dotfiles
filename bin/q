#!/usr/bin/ruby

# frozen_string_literal: true

# Recursively query markdown notes.
#
# Usage: q [options]
# Help: q --help
#
# Aron Lebani <aron@lebani.dev>
# 2024

require 'optparse'

def make_tag_re(tags)
  tags&.split(' ')&.reduce('') do |acc, t|
    "#{acc}(?=.*_#{t}[^_]*_)"
  end
end

def make_query_re(query)
  query&.split(' ')&.reduce('') do |acc, q|
    "#{acc}(?=.*#{q}*)"
  end
end

def make_anchor_re(anchor)
  "(?=.*\[.*\]\(.*\))" if anchor
end

def make_check_re(check)
  "(?=(\\*|\\-) \\[\s|-\\])" if check
end

def make_re(options)
  tag_re = make_tag_re(options[:tags])
  query_re = make_query_re(options[:query])
  anchor_re = make_anchor_re(options[:anchor])
  check_re = make_check_re(options[:check])

  re = /#{tag_re}#{query_re}#{anchor_re}#{check_re}.*/i
  puts("--test: #{re}")
  re
end

def colorize(str, color_code)
  "\e[#{color_code}m#{str}\e[0m"
end

def colorize_green(str)
  colorize(str, 32)
end

def colorize_blue(str)
  colorize(str, 34)
end

def walk_md_files
  Dir.glob('**/**').each do |file|
    next if File.directory?(file)
    next if File.extname(file) != '.md'

    File.open(file, 'r') do |content|
      content.readlines.each_with_index do |line, line_no|
        yield file, line, line_no
      end
    end
  end
end

def query(options)
  re = make_re(options)

  walk_md_files do |file, line, line_no|
    if line.match?(re)
      puts("#{colorize_green file}:#{colorize_blue line_no + 1}: #{line}")
    end
  end
end

def list
  tags = []
  re = /(\n|\s)_[^_]*_(\n|\s)/

  walk_md_files do |_, line, _|
    tags.push(line.match(re).to_s.strip) if line.match? re
  end

  puts(tags.uniq.sort)
end

def make_parser
  OptionParser.new do |opts|
    opts.banner = 'Usage: q [options]'
    opts.on('-t TAGS', '--tags=TAGS', 'Query tags, denoted by markdown _italic_ syntax')
    opts.on('-q QUERY', '--query=QUERY', 'Query by keywords')
    opts.on('-c', '--check', 'Query markdown todo items')
    opts.on('-a', '--anchor', 'Query markdown links')
    opts.on('-l', '--list', 'List all tags')
  end
end

def main
  options = {}
  parser = make_parser
  parser.parse!(into: options)

  if options[:list]
    list
  else
    query(options)
  end
end

main if __FILE__ == $0
