#!/usr/bin/ruby

# frozen_string_literal: true

# Recursively query markdown notes.
#
# Usage: q [options]
# Help: q --help
#
# Aron Lebani <aron@lebani.dev>
# 2024

require 'optparse'

def get_re(options)
  re_str = ''

  options[:tags]&.split(' ')&.each do |tag|
    re_str = "#{re_str}(?=.*_#{tag}[^_]*_)"
  end

  options[:query]&.split(' ')&.each do |query|
    re_str = "#{re_str}(?=.*#{query}*)"
  end

  re_str = "#{re_str}(?=.*\[.*\]\(.*\))" if options[:anchor]
  re_str = "#{re_str}(?=(\\*|\\-) \\[\s|-\\])" if options[:check]
  re_str = "#{re_str}.*"

  /#{re_str}/i
end

def colorize(str, color_code)
  "\e[#{color_code}m#{str}\e[0m"
end

def colorize_green(str)
  colorize str, 32
end

def colorize_blue(str)
  colorize str, 34
end

def walk_md_files
  Dir.glob('**/**').each do |file|
    next if File.directory?(file)
    next if File.extname(file) != '.md'

    File.open(file, 'r') do |content|
      content.readlines.each_with_index do |line, line_no|
        yield file, line, line_no
      end
    end
  end
end

def query(options)
  re = get_re options

  walk_md_files do |file, line, line_no|
    puts "#{colorize_green file}:#{colorize_blue line_no + 1}: #{line}" \
        if line.match? re
  end
end

def list
  tags = []
  re = /(\n|\s)_[^_]*_(\n|\s)/

  walk_md_files do |_, line, _|
    tags.push line.match(re).to_s.strip if line.match? re
  end

  puts tags.uniq.sort
end

def main
  options = {}

  OptionParser.new do |opts|
    opts.banner = 'Usage: q [options]'
    opts.on '-t TAGS', '--tags=TAGS', 'Query tags, denoted by markdown _italic_ syntax'
    opts.on '-q QUERY', '--query=QUERY', 'Query by keywords'
    opts.on '-c', '--check', 'Query markdown todo items'
    opts.on '-a', '--anchor', 'Query markdown links'
    opts.on '-l', '--list', 'List all tags'
  end.parse! into: options

  if options[:list]
    list
  else
    query options
  end
end

main if __FILE__ == $0
