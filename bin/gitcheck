#!/usr/bin/env bash

remote=0

usage() {
	echo "Usage: gitcheck [OPTION]"
	echo "Options:"
	echo "	-h | --help	show help"
	echo "	-r | --remote	check if branch is ahead of or behind remote"
}

check_status() {
	[ ! -d .git ] && return

	git status --porcelain
}

check_remote() {
	[ ! -d .git ] && return

	git remote update > /dev/null 2> /dev/null

	branch=$(git rev-parse --abbrev-ref HEAD)
	ahead=$(git rev-list --count origin/"$branch".."$branch")
	behind=$(git rev-list --count "$branch"..origin/"$branch")

	if [ "$ahead" != "0" ] || [ "$behind" != "0" ]; then
		echo "$ahead commits ahead, $behind commits behind"
	fi
}

main() {
	find "$(pwd)" -type d | while read -r dir; do
		[ ! -d "$dir/.git" ] && continue

		echo "$dir"
		cd "$dir" || continue

		check_status
		[ "$remote" -eq 1 ] && check_remote
	done
}

case "$1" in
	-h | --help ) usage ;;
	-r | --remote ) remote=1; main ;;
	* ) main ;;
esac
