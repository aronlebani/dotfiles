#!/usr/bin/env ruby

# frozen_string_literal: true

# Performs statistics on programming languages used in source code
# files.
#
# Usage: langstat glob [options]
#
# Aron Lebani <aron@lebani.dev>
# 2024

# TODO
# - Order results by percentage
# - Figure out how to test for binary faster - major bottleneck
# - Option to skip other

require 'optparse'
require 'nokogiri'
require 'open-uri'
require 'uri'

class File
	def self.ascii?(filename) = !`file --mime '#{filename}'`.include? 'charset=binary'

	def self.shebang?(str) = str[0] == '#' && str[1] == '!'

	def self.shebang(filename)
		return if File.empty? filename

		first_line = File.open filename, 'r', &:readline

		return first_line if shebang? first_line
	end
end

class Db
	def initialize(path)
		@entries = File.open(path, 'r') do |file|
			file.readlines
				.filter { |line| !comment? line }
				.map { |line| line.sub("\n", '').split(', ') }
		end
	end

	def find(lang)
		lang_item = @entries.find do |entry|
			entry.find do |candidate|
				candidate == lang
			end
		end

		return canonical lang_item if lang_item
	end

	private

	def comment?(line) = line.start_with? '#'

	def canonical(entry) = entry[0]
end

class Lang
	def self.derive(filename)
		ext = ext_lang filename
		she = shebang_lang filename

		return ext if ext
		return she if she

		filename_lang filename
	end

	def self.shebang_lang(filename)
		shebang = File.shebang filename

		return unless shebang

		basename = File.basename filename
		splits = basename.split

		# example: #!/usr/bin/env python
		return splits[1] if splits[0] == 'env'

		# example: #!/usr/bin/bash
		# example: #!/usr/bin/sbcl --script
		splits[0]
	end

	def self.ext_lang(filename)
		ext = File.extname filename

		return ext.sub '.', ''	unless ext.empty?
	end

	def self.filename_lang(filename) = File.basename filename
end

def puts_dir(path, langs, total)
	langs = langs.map do |key, value|
		percentage = value / total.to_f * 100
		"#{key}: #{value} (#{percentage.round}%)"
	end

	puts "#{path} #{langs.join ', '} [total: #{total}]"
end

def puts_file(path, lang, count)
	puts "#{path} #{lang}: #{count}" if lang
end

def stat_dir(path, db)
	langs = {}
	total = 0

	Dir.glob("#{path}/**/**").each do |child_path|
		next unless File.file? child_path
		next unless File.ascii? child_path

		lang = db.find Lang.derive child_path
		lang ||= 'other'
		line_count = File.open(child_path, 'r').count
		total += line_count

		if langs.key?(lang)
			langs[lang] += line_count
		else
			langs[lang] = line_count
		end
	end

	puts_dir path, langs, total
end

def stat_file(path, db)
	return unless File.ascii? path

	lang = db.find Lang.derive path
	line_count = File.open(path, 'r').count

	puts_file path, lang, line_count
end

def db_path(options)
	if options[:db]
		options[:db]
	elsif File.exist? "#{Dir.home}/.config/langs"
		"#{Dir.home}/.config/langs"
	elsif File.exist? "#{Dir.home}/etc/langs"
		"#{Dir.home}/etc/langs"
	end
end

def main(path, args)
	db = Db.new db_path args

	glob = path
	glob = "#{path}/**" if args[:subdir]
	glob = "#{path}/**/**" if args[:recurse]

	Dir.glob(glob).each do |path|
		if File.file? path
			stat_file path, db
		elsif File.directory? path
			stat_dir path, db
		end
	end
end

if __FILE__ == $0
	args = {}
	parser = OptionParser.new

	parser.banner = 'Usage: langstat [OPTIONS] directory'
	parser.on '-d DB', '--db=DB', 'language database file'
	parser.on '-s', '--subdir', 'groups summary by sub-directories'
	parser.on '-r', '--recurse', 'recurses infinitely'
	parser.on '-h', '--help', 'prints this help'

	parser.parse! into: args

	unless ARGV[0]
		puts parser.help
		exit 1
	end

	main ARGV[0], args
end
