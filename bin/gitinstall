#!/usr/bin/sbcl --script

(load "~/.quicklisp/setup.lisp")
(ql:quickload "dexador" :silent t)
(ql:quickload "jonathan" :silent t)
(ql:quickload "clingon" :silent t)

(defpackage :gitinstall
  (:use :cl)
  (:import-from :sb-ext :run-program)
  (:import-from :sb-posix :getcwd)
  (:import-from :dexador :request)
  (:import-from :jonathan :parse)
  (:import-from :clingon :make-option :make-command :getopt :run))

(in-package :gitinstall)

(defconstant +github-repositories-url+
  "https://api.github.com/user/repos?per_page=100&affiliation=owner,collaborator")

(defun bearer (token)
  `(format nil "Bearer ~a" ,token))

(defun get-repositories (token)
  (parse (request +github-repositories-url+
                  :headers `(("Authorization" . ,(bearer token))))
         :as :hash-table))

(defun ssh-url (repository)
  (gethash "ssh_url" repository))

(defun clone (url path &key dry-run)
  (format t "cloning ~a into ~a~a~&" url path)
  (when (not dry-run)
        (with-output-to-string (err)
          (run-program "/usr/bin/git"
                       `("clone" ,url)
                       :error err
                       :directory path)
          (when (search "already exists" (get-output-stream-string err))
                (format t "...repository already exists~a" #\linefeed)))))

(defun main (cmd)
  (let ((token (getopt cmd :token))
        (dest (getopt cmd :dest))
        (dry-run (getopt cmd :dry-run)))
    (mapc (lambda (repository)
            (clone (ssh-url repository) dest :dry-run dry-run))
          (get-repositories token))))

(defun options ()
  (list (make-option :string
                     :description "github personal access token"
                     :short-name #\t
                     :long-name "token"
                     :required t
                     :key :token)
        (make-option :string
                     :description "destination directory"
                     :short-name #\d
                     :long-name "dest"
                     :env-vars '("PWD")
                     :key :dest)
        (make-option :flag
                     :description "dry run"
                     :long-name "dry-run"
                     :key :dry-run)))

(defun command ()
  (make-command :name "gitinstall"
                :description "clone git repositories into the specified directory"
                :version "0.1.0"
                :authors '("Aron Lebani <aron@lebani.dev>")
                :license "MIT"
                :options (options)
                :handler #'main))

(run (command))
