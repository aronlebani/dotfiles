#!/usr/bin/env ruby

# frozen_string_literal: true

require 'optparse'
require 'net/http'
require 'json'
require 'open3'

def clone(url, path, dry_run: false)
	puts "cloning #{url} into #{path}"

	return if dry_run

	Open3.popen3('git', 'clone', url, chdir: path) do |_, _, stderr, wait_th|
		unless wait_th.value.success?
			if stderr.readline.include?('already exists')
				puts '...repository already exists'
			else
				puts '...failed to clone repository'
			end
		end
	end
end

def get_repositories(token)
	headers = { Authorization: "Bearer #{token}" }
	github_repos_url =
		URI 'https://api.github.com/user/repos?per_page=100&affiliation=owner,collaborator'

	res = Net::HTTP.get(github_repos_url, headers)

	JSON.parse(res)
end

def ssh_url(repository) = repository['ssh_url']

def archived?(repository) = repository['archived'] == true

def main(args)
	token = args[:token]
	dest = args[:dest] || '.'
	dry_run = args[:"dry-run"]

	get_repositories(token).each do |repo|
		next if args[:"skip-archived"] && archived?(repo)

		url = ssh_url(repo)
		clone(url, dest, dry_run: dry_run)
	end
end

if __FILE__ == $0
	args = {}
	OptionParser.new do |p|
		p.banner = 'Usage: gitinstall [OPTIONS]'
		p.on('-t TOKEN', '--token=TOKEN', 'github personal access token')
		p.on('-d DEST', '--dest=DEST', 'destination directory')
		p.on('--skip-archived', 'skip archived repositories')
		p.on('--dry-run', 'dry run')
		p.parse!(into: args)
	end

	unless args[:token]
		puts "Missing personal access token"
		exit 1
	end

	main(args)
end
