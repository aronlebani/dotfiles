# Adapted from https://github.com/twolfson/sexy-bash-prompt

if tput setaf 1 &> /dev/null; then
    tput sgr0
    MAGENTA=$(tput setaf 5)
    ORANGE=$(tput setaf 4)
    GREEN=$(tput setaf 2)
    PURPLE=$(tput setaf 1)
    BOLD=$(tput bold)
    RESET=$(tput sgr0)
else
    MAGENTA="\033[1;31m"
    ORANGE="\033[1;33m"
    GREEN="\033[1;32m"
    PURPLE="\033[1;35m"
    BOLD=""
    RESET="\033[m"
fi

function username_host() {
    # I know what my name is
    if [[ $USER != aron* ]]; then
        echo "${bold}${MAGENTA}\u${RESET}${BOLD} at ${ORANGE}\h${RESET}${BOLD} in ";
    fi
}

function git_info() {
    # Don't show git info in home (dotfiles) repo 
    if [[ $(git rev-parse --show-toplevel) != /home/aron ]] && [[ $(git rev-parse --show-toplevel) != /Users/aron ]]; then
        git rev-parse --is-inside-work-tree &>/dev/null || return # Check if we're in a git repo

        branch=$(git symbolic-ref -q HEAD | sed -e 's|^refs/heads/||')
        dirty=$(git diff --quiet --ignore-submodules HEAD &>/dev/null; [ $? -eq 1 ]&& echo -e "*")

        echo "${RESET}${BOLD} on ${PURPLE}$branch$dirty"
    fi
}

function set_bash_prompt() {
    PS1="[\t] $(username_host)${GREEN}${BOLD}\w${RESET}${BOLD}$(git_info)${RESET}${BOLD}\n\$ ${RESET}"
}

# This method of setting bash prompt resets the prompt every time it is rendered
# which is necessary to get updated git info for each directory
PROMPT_COMMAND=set_bash_prompt
